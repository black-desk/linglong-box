@startuml ll-box

!pragma teoz true

actor user
participant cli
participant monitor

box "rootfs namespaces"
participant "rootfs preparer" as rootfs
end box

box "container namespaces"
participant init
participant app
end box


user -> cli: run "create"
activate cli
cli -> cli: parse config.json
cli -> cli: update state

==creating==

{start1} cli ->> monitor: fork
activate monitor
monitor -> monitor: create systemd scope
monitor -> monitor: prctl **PR_SET_CHILD_SUBREAPER**
monitor ->> rootfs: clone
activate rootfs
monitor -> monitor: start epoll

group prepare rootfs
rootfs -> rootfs: setup user namespace
rootfs -> rootfs: do native mounts
rootfs -> rootfs: setup fuse
rootfs -> rootfs: setup dbus-proxy
end

rootfs -> init: clone
activate init
deactivate rootfs
monitor <- init: requset write ID mapping
monitor -> monitor: setup ID mapping
monitor --> init: done
init -> init: setup container
monitor <-- init: "create" result
{end1} cli <-- monitor: "create" result
{start1} <-> {end1}: **blocked**
cli -> cli: update state

==created==
monitor -> monitor: run "prestart"
monitor -> monitor: run "createRuntime"
monitor -> init: requset run hooks
init -> init: run "createContainer"
init -> init: `pivot_root`
init -> init: start listening socket
monitor <-- init: "hooks" result

cli <-- monitor: "hooks" result
user <-- cli: done
deactivate cli


user -> cli: run "start"
activate cli
cli -> init: start process
init -> init: run "startContainer"
init -> app: fork & exec
activate app
init -> monitor : request run hooks
monitor -> monitor: run "poststart"
monitor --> init: "hooks" result
cli <-- init: "start & hooks" result
cli -> cli: update state

==running==

user <-- cli: done
deactivate cli

app -> app: run

note left
At this time `pstree`
on host will show
someting like this:
- monitor
    - dbus proxy
    - fuse
    - init
        - app
end note

user -> cli: run "kill"
activate cli
cli -> init: kill
user <-- cli: done
deactivate cli

init -> app: kill
init <-- app: exit
deactivate app
monitor <-- init: exit
deactivate init
monitor -> monitor: update state

==stopped==

user -> cli: run "delete"
activate cli
cli -> monitor: kill
monitor -> monitor: run "poststop"
monitor -> monitor: release rootfs
cli <-- monitor: exit
deactivate monitor
cli -> cli: update state
user <-- cli: done
deactivate cli

@enduml